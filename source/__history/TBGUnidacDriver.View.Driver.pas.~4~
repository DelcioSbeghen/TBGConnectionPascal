unit TBGUnidacDriver.View.Driver;

interface

uses
  TBGConnection.Model.Interfaces, System.Classes, TBGConnection.Model.Conexao.Parametros,
  System.Generics.Collections,  MemDS, DBAccess, Uni;

Type
  TBGUnidacDriverConexao = class(TComponent, iDriver)
  private
    FFConnection: TUniConnection;
    FFQuery: TUniQuery;
    FiConexao : iConexao;
    FiQuery : TList<iQuery>;
    procedure SetFConnection(const Value: TUniConnection);
    procedure SetFQuery(const Value: TUniQuery);
    protected
      FParametros : iConexaoParametros;
      function Conexao : iConexao;
      function Query : iQuery;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iDriver;
      function Conectar : iConexao;
      function &End: TComponent;
      function Parametros: iConexaoParametros;

    published
      property FConnection : TUniConnection read FFConnection write SetFConnection;
  end;

procedure Register;

implementation

{$R Icones.res}

uses
  TBGFiredacDriver.Model.Conexao, TBGFiredacDriver.Model.Query,
  System.SysUtils;

{ TBGUnidacDriverConexao }

function TBGUnidacDriverConexao.Conectar: iConexao;
begin

end;

function TBGUnidacDriverConexao.&End: TComponent;
begin

end;

function TBGUnidacDriverConexao.Conexao: iConexao;
begin
  //FiConexao := TUnidacDriverModelConexao.New(FFConnection);
  Result := FiConexao;
end;

constructor TBGUnidacDriverConexao.Create;
begin
  FiQuery := TList<iQuery>.Create;
end;

destructor TBGUnidacDriverConexao.Destroy;
begin
  FreeAndNil(FiQuery);
  inherited;
end;

class function TBGUnidacDriverConexao.New: iDriver;
begin
  Result := Self.Create;
end;

function TBGUnidacDriverConexao.Parametros: iConexaoParametros;
begin
  Result := FParametros;
end;


function TBGUnidacDriverConexao.Query: iQuery;
begin
  if Not Assigned(FiQuery) then
    FiQuery := TList<iQuery>.Create;

  //FiQuery.Add(TUnidacModelQuery.New(FFConnection));
  Result := FiQuery[FiQuery.Count-1];
end;

procedure TBGUnidacDriverConexao.SetFConnection(const Value: TUniConnection);
begin
  FFConnection := Value;
end;

procedure TBGUnidacDriverConexao.SetFQuery(const Value: TUniQuery);
begin
  FFQuery := Value;
end;

procedure Register;
begin
  RegisterComponents('TBGConnection', [TBGUnidacDriverConexao]);
end;


end.
