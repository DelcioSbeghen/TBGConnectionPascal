unit TBGFiredacDriver.Model.Query;

interface

uses
  TBGConnection.Model.Interfaces, Data.DB, System.Classes, FireDAC.Comp.Client,
  System.SysUtils, TBGConnection.Model.DataSet.Proxy, TBGConnection.Model.Helper,
  TBGConnection.Model.DataSet.Interfaces, TBGConnection.Model.DataSet.Factory,
  TBGConnection.Model.DataSet.Observer;

Type
  TFiredacModelQuery = class(TInterfacedObject, iQuery)
    private
      FSQL : String;
      FConexao : TFDConnection;
      FQuery : TFDQuery;
      FDataSource : TDataSource;
      FDataSet : iDataSet;
      FChangeDataSet : TChangeDataSet;
    public
      constructor Create(Conexao : TFDConnection);
      destructor Destroy; override;
      class function New(Conexao : TFDConnection) : iQuery;
      //iObserver
      procedure ApplyUpdates(DataSet : TDataSet);
      //iQuery
      function Open(aSQL: String): iQuery;
      function ExecSQL(aSQL : String) : iQuery;
      function DataSet : TDataSet; overload;
      function DataSet(Value : TDataSet) : iQuery; overload;
      function DataSource(Value : TDataSource) : iQuery;
      function Fields : TFields;
      function ChangeDataSet(Value : TChangeDataSet) : iQuery;
      function &End: TComponent;
      function Tag(Value : Integer) : iQuery;
      function LocalSQL(Value : TComponent) : iQuery;
  end;

implementation

{ TFiredacModelQuery }

function TFiredacModelQuery.&End: TComponent;
begin
  Result := FQuery;
end;

function TFiredacModelQuery.ExecSQL(aSQL: String): iQuery;
begin
  FSQL := aSQL;
  FQuery.SQL.Clear;
  FQuery.SQL.Add(FSQL);
  FQuery.ExecSQL;
end;

function TFiredacModelQuery.Fields: TFields;
begin
  Result := FQuery.Fields;
end;

function TFiredacModelQuery.LocalSQL(Value: TComponent): iQuery;
begin
  Result := Self;
  FQuery.LocalSQL := TFDCustomLocalSQL(Value);
end;

procedure TFiredacModelQuery.ApplyUpdates(DataSet: TDataSet);
begin
  FDataSetObserver.Notify(FDataSet.GUUID);  
end;

function TFiredacModelQuery.ChangeDataSet(Value: TChangeDataSet): iQuery;
begin
  Result := Self;
  FChangeDataSet := Value;
end;

constructor TFiredacModelQuery.Create(Conexao : TFDConnection);
begin
  FConexao := Conexao;
  FQuery := TFDQuery.Create(nil);
  FQuery.Connection := FConexao;
  FQuery.AfterPost := ApplyUpdates;
  Fquery.AfterDelete := ApplyUpdates;
end;

function TFiredacModelQuery.DataSet: TDataSet;
begin
  Result := TDataSet(FQuery);
end;

function TFiredacModelQuery.DataSet(Value: TDataSet): iQuery;
begin
  Result := Self;
  FDataSet.DataSet(Value);
end;

function TFiredacModelQuery.DataSource(Value : TDataSource) : iQuery;
begin
  Result := Self;
  FDataSource := Value;
end;

destructor TFiredacModelQuery.Destroy;
begin
  FreeAndNil(FQuery);
  inherited;
end;

class function TFiredacModelQuery.New(Conexao : TFDConnection) : iQuery;
begin
  Result := Self.Create(Conexao);
end;

function TFiredacModelQuery.Open(aSQL: String): iQuery;
begin
  Result := Self;
  FSQL := aSQL;
  if not FDataSetProxy.CacheDataSet(FSQL, FDataSet^) then
  begin
    FDataSet^.SQL(FSQL);
    FDataSet^.DataSet(FQuery);
    FQuery.Close;
    FQuery.Open(FSQL);
  end;
  FDataSource.DataSet := FDataSet^.DataSet;
end;

function TFiredacModelQuery.Tag(Value: Integer): iQuery;
begin
  Result := Self;
  FQuery.Tag := Value;
end;

end.
