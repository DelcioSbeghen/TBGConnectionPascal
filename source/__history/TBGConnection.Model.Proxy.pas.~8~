unit TBGConnection.Model.Proxy;

interface

uses
  TBGConnection.Model.Interfaces, System.Generics.Collections, Data.DB;

Type
  TTBGConnectionModelProxy = class(TInterfacedObject, iDriverProxy)
    private
      FCacheDataSet : TDictionary<string, TDataSet>;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iDriverProxy;
      function CacheDataSet(Key : String; var Value : TDataSet) : iDriverProxy;
  end;

implementation

uses
  System.SysUtils;

{ TTBGConnectionModelProxy }

function TTBGConnectionModelProxy.CacheDataSet(Key: String;
  var Value: TDataSet): iDriverProxy;
begin
  Result := Self;
  if not FCacheDataSet.TryGetValue(Key, Value) then
  begin
    raise Exception.Create('DataSet não existe no Cache');
  end;
end;

constructor TTBGConnectionModelProxy.Create;
begin
  FCacheDataSet := TDictionary<string, TDataSet>.Create;
end;

destructor TTBGConnectionModelProxy.Destroy;
begin
  FreeAndNil(FCacheDataSet);
  inherited;
end;

class function TTBGConnectionModelProxy.New: iDriverProxy;
begin
  Result := Self.Create;
end;

end.
