unit TBGQuery.View.Principal;

interface

uses
  TBGConnection.Model.Interfaces, TBGConnection.View.Interfaces;

Type
  TTBGQuery = class(TInterfacedObject, iQuery)
    private
    FConnection: iTBGConnection;
    procedure SetConnection(const Value: iTBGConnection);
    function GetQuery: iQuery;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iQuery;
       property Query : iQuery read GetQuery implements iQuery;
    published
      property Connection : iTBGConnection read FConnection write SetConnection;

  end;

procedure Register;

implementation

uses
  System.Classes;

{ TTBGQuery }

constructor TTBGQuery.Create;
begin

end;

destructor TTBGQuery.Destroy;
begin

  inherited;
end;

function TTBGQuery.GetQuery: iQuery;
begin
  Result := FConnection.Driver.Query;
end;

class function TTBGQuery.New: iQuery;
begin
  Result := Self.Create;
end;

procedure TTBGQuery.SetConnection(const Value: iTBGConnection);
begin
  FConnection := Value;
end;

procedure Register;
begin
  RegisterComponents('TBGAbstractConnection', [TTBGQuery]);
end;

end.
