unit TBGConnection.View.Principal;

interface

uses
  TBGConnection.View.Interfaces, TBGConnection.Model.Interfaces;

Type
  TTBGConnection = class(TInterfacedObject, iTBGConnection)
    private
    FQuery: iQuery;
    FConexao: iConexao;
    procedure SetConexao(const Value: iConexao);
    procedure SetQuery(const Value: iQuery);
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iTBGConnection;
      function GetConexao : iConexao;
      function GetQuery : iQuery;
    published
      property Conexao : iConexao read FConexao write SetConexao;
      property Query : iQuery read FQuery write SetQuery;
  end;

procedure Register;

implementation

uses
  System.Classes;

{ TTBGConnection }

constructor TTBGConnection.Create;
begin

end;

destructor TTBGConnection.Destroy;
begin

  inherited;
end;

function TTBGConnection.GetConexao: iConexao;
begin
  Result := FConexao;
end;

function TTBGConnection.GetQuery: iQuery;
begin
  Result := FQuery;
end;

class function TTBGConnection.New: iTBGConnection;
begin
  Result := Self.Create;
end;

procedure TTBGConnection.SetConexao(const Value: iConexao);
begin
  FConexao := Value;
end;

procedure TTBGConnection.SetQuery(const Value: iQuery);
begin
  FQuery := Value;
end;

procedure Register;
begin
  RegisterComponents('TBGConnection', [TTBGConnection]);
end;

end.
