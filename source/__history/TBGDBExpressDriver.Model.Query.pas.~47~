unit TBGDBExpressDriver.Model.Query;

interface

uses
  TBGConnection.Model.Interfaces, Data.DB, System.Classes,
  System.SysUtils, Data.SqlExpr, Datasnap.Provider, Datasnap.DBCLient;

Type
  TDBExpressModelQuery = class(TComponent, iQuery)
    private
      FConexao : TSQLConnection;
      FQuery : TSQLQuery;
      FDataSource : TDataSource;
      FDataSet : TDataSet;
      FChangeDataSet : TChangeDataSet;
      DataSetProvider1: TDataSetProvider;
      ClientDataSet1: TClientDataSet;
    procedure InstaciarComponentes;
    procedure AtribuirDataSet;
    public
      constructor Create(Conexao : TSQLConnection);
      destructor Destroy; override;
      class function New(Conexao : TSQLConnection) : iQuery;
      //iQuery
      function Open(aSQL: String): iQuery;
      function ExecSQL(aSQL : String) : iQuery;
      function DataSet : TDataSet; overload;
      function DataSet(Value : TDataSet) : iQuery; overload;
      function DataSource(Value : TDataSource) : iQuery;
      function Fields : TFields;
      function &End: TComponent;
      procedure ApplyUpdates(DataSet : TDataSet);
      function Tag(Value : Integer) : iQuery;
  end;

implementation

{ TDBExpressModelQuery }

function TDBExpressModelQuery.&End: TComponent;
begin
  Result := FQuery;
end;

function TDBExpressModelQuery.ExecSQL(aSQL: String): iQuery;
begin
  FQuery.SQL.Clear;
  FQuery.SQL.Add(aSQL);
  FQuery.ExecSQL;
end;

function TDBExpressModelQuery.Fields: TFields;
begin
  Result := ClientDataSet1.Fields;
end;

procedure TDBExpressModelQuery.ApplyUpdates(DataSet: TDataSet);
begin
  ClientDataSet1.ApplyUpdates(0);
end;

procedure TDBExpressModelQuery.AtribuirDataSet;
begin
  if not (Assigned(FDataSource) or Assigned(FDataSet)) then
    raise Exception.Create('Não Foi Instanciado um Container DataSet/DataSource');
  if Assigned(FDataSource) then
    FDataSource.DataSet := ClientDataSet1;
  if Assigned(FDataSet) then
    FDataSet := ClientDataSet1;
end;

procedure TDBExpressModelQuery.InstaciarComponentes;
begin
  FQuery := TSQLQuery.Create(Self);
  FQuery.SQLConnection := FConexao;
  DataSetProvider1 := TDataSetProvider.Create(Self);
  ClientDataSet1 := TClientDataSet.Create(Self);
  DataSetProvider1.DataSet := FQuery;
  DataSetProvider1.Options := [poAllowCommandText];
  DataSetProvider1.Name := 'DataSetProvider1';
  ClientDataSet1.ProviderName := DataSetProvider1.Name;
  ClientDataSet1.FetchOnDemand := true;
  ClientDataSet1.AfterPost := ApplyUpdates;
  ClientDataSet1.AfterDelete := ApplyUpdates;
end;

constructor TDBExpressModelQuery.Create(Conexao : TSQLConnection);
begin
  FConexao := Conexao;
  InstaciarComponentes;
end;

function TDBExpressModelQuery.DataSet: TDataSet;
begin
  Result := TDataSet(ClientDataSet1);
end;

function TDBExpressModelQuery.DataSet(Value: TDataSet): iQuery;
begin
  Result := Self;
  FDataSet := Value;
end;

function TDBExpressModelQuery.DataSource(Value : TDataSource) : iQuery;
begin
  Result := Self;
  FDataSource := Value;
end;

destructor TDBExpressModelQuery.Destroy;
begin
  FreeAndNil(FQuery);
  FreeAndNil(DataSetProvider1);
  FreeAndNil(ClientDataSet1);
  inherited;
end;

class function TDBExpressModelQuery.New(Conexao : TSQLConnection) : iQuery;
begin
  Result := Self.Create(Conexao);
end;

function TDBExpressModelQuery.Open(aSQL: String): iQuery;
begin
  Result := Self;
  AtribuirDataSet;
  ClientDataSet1.CommandText := '';
  ClientDataSet1.CommandText := aSQL;
  ClientDataSet1.Open;

end;

function TDBExpressModelQuery.Tag(Value: Integer): iQuery;
begin
  Result := Self;
  FQuery.Tag := Value;
end;

end.

