unit TBGConnection.Model.DataSet.Proxy;

interface

uses
  Classes, TBGConnection.Model.Interfaces, System.Generics.Collections, Data.DB,
  TBGConnection.Model.DataSet.Interfaces;

Type
  TTBGConnectionModelProxy = class(TInterfacedObject, iDriverProxy)
    private
      FCacheDataSet : TDictionary<string, iDataSet>;
      FObserver : ICacheDataSetSubject;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iDriverProxy;
      function CacheDataSet(Key : String; var Value : iDataSet) : boolean;
      function AddCacheDataSet(Key : String; Value : iDataSet) : iDriverProxy;
      function RemoveCache(Key : String) : iDriverProxy;
      function ClearCache : iDriverProxy;
      function ReloadCache(Value : String) : iDriverProxy;
  end;

var
  FDataSetProxy : TTBGConnectionModelProxy;

implementation

uses
  System.SysUtils, TBGConnection.Model.DataSet.Factory,
  TBGConnection.Model.DataSet.Observer;

{ TTBGConnectionModelProxy }

function TTBGConnectionModelProxy.AddCacheDataSet(Key: String;
  Value: iDataSet): iDriverProxy;
begin
  FCacheDataSet.Add(Key, Value);
end;

function TTBGConnectionModelProxy.CacheDataSet(Key: String;
  var Value: iDataSet): boolean;
var
  Chave : String;
  DataSet : iDataSet;
begin
  Result := false;
  if FCacheDataSet.Count > 0 then
  begin
    for Chave in FCacheDataSet.Keys do
      if FCacheDataSet.Items[Chave].SQL = Key then
      begin
        Value := FCacheDataSet.Items[Chave];
        Result := true;
      end;
  end;

  if not Assigned(Value) then
  begin
    Value := TConnectionModelDataSetFactory.New.DataSet(FObserver);
  end;

end;

function TTBGConnectionModelProxy.ClearCache: iDriverProxy;
begin
  if Assigned(FCacheDataSet) then
    FreeAndNil(FCacheDataSet);

  FCacheDataSet := TDictionary<string, iDataSet>.Create;
end;

constructor TTBGConnectionModelProxy.Create;
begin
  FCacheDataSet := TDictionary<string, iDataSet>.Create;
  FObserver := TConnectionModelDataSetObserver.New;
end;

destructor TTBGConnectionModelProxy.Destroy;
begin
  FreeAndNil(FCacheDataSet);
  inherited;
end;

class function TTBGConnectionModelProxy.New: iDriverProxy;
begin
  Result := Self.Create;
end;

function TTBGConnectionModelProxy.ReloadCache(Value: String): iDriverProxy;
begin
  Result := Self;
  FObserver.Notify(Value);
end;

function TTBGConnectionModelProxy.RemoveCache(Key: String): iDriverProxy;
begin
  FCacheDataSet.Remove(Key);
  FCacheDataSet.TrimExcess;
end;

initialization
  FDataSetProxy := TTBGConnectionModelProxy.Create;

finalization
  //FDataSetProxy.DisposeOf;

end.
